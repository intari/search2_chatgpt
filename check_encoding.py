# File: check_encoding.py
import os
import argparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def is_likely_utf8(filename: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ UTF-8.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ UnicodeDecodeError.
    """
    try:
        with open(filename, "rb") as f:
            # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª. –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ.
            f.read().decode('utf-8')
        return True
    except UnicodeDecodeError:
        # –≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ UTF-8
        return False
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UTF-8: {filename}")
        # –ù–µ –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, –Ω–æ –¥–ª—è —Ü–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–∏—Ç–∞–µ–º '–ø—Ä–æ–±–ª–µ–º–Ω—ã–º'
        return False
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UTF-8: {e}")
        # –ù–µ –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, –Ω–æ –¥–ª—è —Ü–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–∏—Ç–∞–µ–º '–ø—Ä–æ–±–ª–µ–º–Ω—ã–º'
        return False

def check_all_files_not_utf8(directory: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–æ–±—â–∞—è –æ —Ç–µ—Ö, —á—Ç–æ –Ω–µ –≤ UTF-8."""
    found_non_utf8 = False
    checked_files = 0
    problematic_files = []

    for root, _, files in os.walk(directory):
        for file in files:
            # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            if file.lower().endswith(('.txt', '.md', '.html', '.css', '.js', '.json', '.xml', '.csv')):
                 filepath = os.path.join(root, file)
                 checked_files += 1
                 if not is_likely_utf8(filepath):
                      problematic_files.append(filepath)
                      found_non_utf8 = True

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {checked_files}")
    if found_non_utf8:
        logging.warning(f"–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã ({len(problematic_files)}), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ UTF-8:")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ chardet –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            import chardet
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è chardet)...")
            for filepath in problematic_files:
                try:
                    with open(filepath, "rb") as f:
                        raw_data = f.read(8192) # –ß–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è chardet
                        if not raw_data: continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ
                        result = chardet.detect(raw_data)
                        encoding = result["encoding"] or "N/A"
                        confidence = result["confidence"] or 0.0
                        logging.warning(f"  - {filepath} (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ {encoding}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f})")
                except Exception as e:
                    logging.warning(f"  - {filepath} (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É: {e})")

        except ImportError:
            logging.warning("–ú–æ–¥—É–ª—å 'chardet' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ (`pip install chardet`), —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            for filepath in problematic_files:
                 logging.warning(f"  - {filepath}")
    else:
        logging.info("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ UTF-8.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.")
    parser.add_argument("directory", type=str, help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    args = parser.parse_args()

    if not os.path.isdir(args.directory):
        logging.error(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {args.directory}")
    else:
        logging.info(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –Ω–µ –≤ UTF-8 –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {args.directory}...")
        check_all_files_not_utf8(args.directory)
        logging.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
